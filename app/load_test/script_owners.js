/*
 * REST Petclinic backend Api Documentation
 * This is REST API documentation of the Spring Petclinic backend. If authentication is enabled, when calling the APIs use admin/admin
 *
 * OpenAPI spec version: 1.0
 * Contact: vitaliy.fedoriv@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.3.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";


const BASE_URL = "http://localhost:9966";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export let options = {
    vus: 5000, // Virtual Users (concurrent users)
    duration: '30s', // Duration of the test
};

//  Feature: Load Testing for Owners Endpoints
//  
//    Background:
//      Given that I have {5000} users registered in the system
//  
//    Scenario: Get all owners
//      When a GET request is made to "/owners"
//      Then the response code should be 200
//      And the response time should not exceed {32.00ms} milliseconds
//  
//    Scenario: Create a new owner
//      When a POST request is made to "/owners" with the following data:
//        | address        | city                | firstName |  lastName  |  telephone
//        | 15th Av        | owner1@example.com  | Lucas     |  Gonzales  |  3002587412
//      Then the response code should be 201
//      And the response time should not exceed {15.50ms} milliseconds
//  
//    Scenario: Get a specific owner
//      Given that an owner with ID "{userID}" exists
//      When a GET request is made to "/owners/{userID}"
//      Then the response code should be 200
//      And the response time should not exceed {27.30} milliseconds
//  
//    Scenario: Update an existing owner
//      Given that an owner with ID "{userID}" exists
//      When a PUT request is made to "/owners/{userID}" with the following data:
//        | address        | city                | firstName |  lastName  |  telephone
//        | 15th Av        | owner1@example.com  | Lucas     |  Gonzales  |  3002587412
//      Then the response code should be 204
//      And the response time should not exceed {121.89ms} milliseconds

export default function () {
    group("/petclinic/api/owners", () => {
        let lastName = 'Davis';
        let url = BASE_URL + `/petclinic/api/owners?lastName=${lastName}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Owner details found and returned.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        const body = JSON.stringify({
            "address": "15th Av",
            "city": "New York",
            "firstName": "Lucas",
            "lastName": "Gonzales",
            "telephone": "3002587412"
        });
        url = BASE_URL + `/petclinic/api/owners`;
        const params = { headers: { "Content-Type": "application/json" } };
        request = http.post(url, body, params);
        check(request, {
            "The pet owner was sucessfully added.": (r) => r.status === 201
        });
        sleep(SLEEP_DURATION);
    });

    group("/petclinic/api/owners/{ownerId}", () => {
        let ownerId = '8';
        let url = BASE_URL + `/petclinic/api/owners/${ownerId}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Owner details found and returned.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        const body = JSON.stringify({
            "address": "15th Av",
            "city": "New York",
            "firstName": "Lucas",
            "lastName": "Gonzales",
            "telephone": "3002587412"
        });
        const params = { headers: { "Content-Type": "application/json" } };
        request = http.put(url, body, params);
        check(request, {
            "Update successful.": (r) => r.status === 204
        });
        sleep(SLEEP_DURATION);
    });
}
